// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  slug          String        @unique
  description   String?
  subcategories Subcategory[]
  products      Product[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Subcategory {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String?
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  Int
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id             Int          @id @default(autoincrement())
  title          String
  srcUrl         String
  gallery        String       // JSON string of array
  price          Float
  discount       String       // JSON string of discount object
  rating         Float
  category       Category     @relation(fields: [categoryId], references: [id])
  categoryId     Int
  subcategory    Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId  Int?
  description    String?      // Product description
  colors         String?      // JSON string of colors array
  specifications String?      // JSON string of specifications array
  faqs           String?      // JSON string of FAQs array
  reviews        Review[]
  orderItems     OrderItem[]
  cartItems      CartItem[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Review {
  id        Int     @id @default(autoincrement())
  user      String
  content   String
  rating    Int
  date      String
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Order {
  id              String        @id @default(cuid())
  userId          String?       // Link to User (optional for guest checkout)
  user            User?         @relation(fields: [userId], references: [id])
  customerEmail   String
  customerName    String
  customerPhone   String?
  shippingAddress String        // JSON string of address object
  billingAddress  String?       // JSON string of address object
  subtotal        Float
  tax             Float
  shipping        Float
  total           Float
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  trackingNumber  String?
  notes           String?
  orderItems      OrderItem[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float   // Price at time of order
  color     String? // Selected color
  createdAt DateTime @default(now())
}

model CartItem {
  id        String   @id @default(cuid())
  sessionId String   // For guest users
  userId    String?  // For logged-in users
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int
  color     String?  // Selected color
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sessionId, productId, color])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // for credentials provider
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
